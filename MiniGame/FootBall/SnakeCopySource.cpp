//#include <iostream>
//#include <conio.h>
//#include <ctime>
//#include <cstdlib>
//#include "Screen.h"
//
//using namespace std;
//
//#define MAP_COL  29
//#define MAP_ROW  22
//
//typedef enum _GAME_STATE { INIT, READY, RUNNING, SUCCESS, FAILED, STOP, RESULT } GAME_STATE;
//typedef enum _DIRECT { LEFT, RIGHT, UP, DOWN, LAST } DIRECT;
//
//typedef struct _POS
//{
//	int nX, nY;
//	int nOldX, nOldY;
//} POS;
//
//typedef struct _STAGE_INFO
//{
//	int nEnemyCount;                // Note: 적 캐릭터의 개수
//	clock_t LimitTime;              // Note: 스테이지의 제한 시간
//	int nEatCount;                  // Note: 먹이 개수
//	int nMap[MAP_ROW][MAP_COL];		// Note: 맵 정보 
//} STAGE_INFO;
//
//typedef struct _SNAKE
//{
//	int	nLife;
//	DIRECT nDirect;
//	clock_t	MoveTime;
//	clock_t	OldTime;
//	POS	sHead;
//	POS	sTail[20];
//} SNAKE;
//
//typedef struct _ENEMY
//{
//	int nLife;
//	int nX, nY;
//	DIRECT nDirect;
//	clock_t MoveTime;
//	clock_t OldTime;
//} ENEMY;
//
//SNAKE g_sSnake;
//ENEMY* g_pEnemy = NULL;
//STAGE_INFO g_StageInfo;
//
//char *g_strFileName[3] = { "map1.bin", "map1.bin", "map1.bin" };
//char g_StateShape[5][3] = { "■", "♥", "⊙", "●", "◆" };
//int g_nEatCount;
//clock_t g_nLimitTime;
//GAME_STATE		g_nGameState = INIT;
//int				g_nStage = -1;
//int				g_nGrade = 0; // 점수 
//int				g_nTotalGrade = 0; // 총점
//clock_t			g_GameStartTime, g_UpdateOldTime, g_RemainTime;
//
//void InitScreen() // 게임 소개 화면
//{
//	ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓");
//	ScreenPrint(0, 1, "┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃");
//	ScreenPrint(0, 2, "┃■                                                      ■┃");
//	ScreenPrint(0, 3, "┃■                                                      ■┃");
//	ScreenPrint(0, 4, "┃■           ◎  ■■■■■          ◎                 ■┃");
//	ScreenPrint(0, 5, "┃■         ♥  ■■                     ♥              ■┃");
//	ScreenPrint(0, 6, "┃■           ■   ┏━━━━━━━━┓                  ■┃");
//	ScreenPrint(0, 7, "┃■       ■■■   ┃★   Snake    ★┃                  ■┃");
//	ScreenPrint(0, 8, "┃■                ┗━━━━━┳━━┛                  ■┃");
//	ScreenPrint(0, 9, "┃■     ◎               /)/)  ┃ ☆     ■■■■■■■■■┃");
//	ScreenPrint(0, 10, "┃■                 ★(*'')/                             ■┃");
//	ScreenPrint(0, 11, "┃■                                       ◎   ♥        ■┃");
//	ScreenPrint(0, 12, "┃■                 ◎                                   ■┃");
//	ScreenPrint(0, 13, "┃■    ■■■■■■                                      ■┃");
//	ScreenPrint(0, 14, "┃■              ■               ●◆◆                 ■┃");
//	ScreenPrint(0, 15, "┃■      ♥◎    ■                   ◆                 ■┃");
//	ScreenPrint(0, 16, "┃■              ■  Press Space Key !! ◆◆◆◆◆◆     ■┃");
//	ScreenPrint(0, 17, "┃■              ■                                      ■┃");
//	ScreenPrint(0, 18, "┃■              ■■■■■     ◎  ♥ ■■■■■        ■┃");
//	ScreenPrint(0, 19, "┃■                                    ■                ■┃");
//	ScreenPrint(0, 20, "┃■                                    ■     ◎  ♥     ■┃");
//	ScreenPrint(0, 21, "┃■                                    ■                ■┃");
//	ScreenPrint(0, 22, "┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃");
//	ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void ReadyScreen()
//{
//	ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓");
//	ScreenPrint(0, 1, "┃                                                          ┃");
//	ScreenPrint(0, 2, "┃                                                          ┃");
//	ScreenPrint(0, 3, "┃                                                          ┃");
//	ScreenPrint(0, 4, "┃                                                          ┃");
//	ScreenPrint(0, 5, "┃                                                          ┃");
//	ScreenPrint(0, 6, "┃                                                          ┃");
//	ScreenPrint(0, 7, "┃                                                          ┃");
//	ScreenPrint(0, 8, "┃                                          ●              ┃");
//	ScreenPrint(0, 9, "┃                                    ☜〓━┃┑            ┃");
//	ScreenPrint(0, 10, "┃                                        ☜〓┛            ┃");
//	ScreenPrint(0, 11, "┃                                        ┏┻┓            ┃");
//	ScreenPrint(0, 12, "┃                                                          ┃");
//	ScreenPrint(0, 13, "┃                                                          ┃");
//	ScreenPrint(0, 14, "┃                                                          ┃");
//	ScreenPrint(0, 15, "┃                                                          ┃");
//	ScreenPrint(0, 16, "┃                                                          ┃");
//	ScreenPrint(0, 17, "┃                                                          ┃");
//	ScreenPrint(0, 18, "┃                                                          ┃");
//	ScreenPrint(0, 19, "┃                                                          ┃");
//	ScreenPrint(0, 20, "┃                                                          ┃");
//	ScreenPrint(0, 21, "┃                                                          ┃");
//	ScreenPrint(0, 22, "┃                                                          ┃");
//	ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void SuccessScreen()
//{
//	ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓");
//	ScreenPrint(0, 1, "┃                                                          ┃");
//	ScreenPrint(0, 2, "┃                                                          ┃");
//	ScreenPrint(0, 3, "┃                                                          ┃");
//	ScreenPrint(0, 4, "┃                                                          ┃");
//	ScreenPrint(0, 5, "┃                                                          ┃");
//	ScreenPrint(0, 6, "┃                       *.   .*                            ┃");
//	ScreenPrint(0, 7, "┃                    *.┏┓┏┓.*대                        ┃");
//	ScreenPrint(0, 8, "┃                    ┏┻┫┣┻┓단                        ┃");
//	ScreenPrint(0, 9, "┃                    ┃━┫┣━┃해                        ┃");
//	ScreenPrint(0, 10, "┃                    ┃━┫┣━┃요~                       ┃");
//	ScreenPrint(0, 11, "┃                    ┗━┛┗━┛                          ┃");
//	ScreenPrint(0, 12, "┃                                                          ┃");
//	ScreenPrint(0, 13, "┃                                                          ┃");
//	ScreenPrint(0, 14, "┃                      You Win!!                           ┃");
//	ScreenPrint(0, 15, "┃                                                          ┃");
//	ScreenPrint(0, 16, "┃                                                          ┃");
//	ScreenPrint(0, 17, "┃                                                          ┃");
//	ScreenPrint(0, 18, "┃                                                          ┃");
//	ScreenPrint(0, 19, "┃                                                          ┃");
//	ScreenPrint(0, 20, "┃                                                          ┃");
//	ScreenPrint(0, 21, "┃                                                          ┃");
//	ScreenPrint(0, 22, "┃                                                          ┃");
//	ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void FailureScreen()
//{
//	ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓");
//	ScreenPrint(0, 1, "┃                                                          ┃");
//	ScreenPrint(0, 2, "┃                                                          ┃");
//	ScreenPrint(0, 3, "┃                                                          ┃");
//	ScreenPrint(0, 4, "┃                                                          ┃");
//	ScreenPrint(0, 5, "┃                                                          ┃");
//	ScreenPrint(0, 6, "┃                                                          ┃");
//	ScreenPrint(0, 7, "┃                     *┭┮  ┭┮*                         ┃");
//	ScreenPrint(0, 8, "┃                  *.  ㅣㅣ▽ㅣㅣ   .*                     ┃");
//	ScreenPrint(0, 9, "┃               ┏ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ┓                   ┃");
//	ScreenPrint(0, 10, "┃               ┃     미션 실패      ┃                   ┃");
//	ScreenPrint(0, 11, "┃               ┗ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ┛                   ┃");
//	ScreenPrint(0, 12, "┃                                                          ┃");
//	ScreenPrint(0, 13, "┃                                                          ┃");
//	ScreenPrint(0, 14, "┃                   (*⌒⌒*)                               ┃");
//	ScreenPrint(0, 15, "┃                  ┏O━━━O━━━━━━━━━━┓        ┃");
//	ScreenPrint(0, 16, "┃                  ┃계속하시겠습니까? <y/n>     ┃        ┃");
//	ScreenPrint(0, 17, "┃                  ┗━━━━━━━━━━━━━━┛        ┃");
//	ScreenPrint(0, 18, "┃                                                          ┃");
//	ScreenPrint(0, 19, "┃                                                          ┃");
//	ScreenPrint(0, 20, "┃                                                          ┃");
//	ScreenPrint(0, 21, "┃                                                          ┃");
//	ScreenPrint(0, 22, "┃                                                          ┃");
//	ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void ResultScreen()
//{
//	ScreenPrint(0, 0, "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓");
//	ScreenPrint(0, 1, "┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃");
//	ScreenPrint(0, 2, "┃■                  ■                                  ■┃");
//	ScreenPrint(0, 3, "┃■                  ■                                  ■┃");
//	ScreenPrint(0, 4, "┃■                  ■                                  ■┃");
//	ScreenPrint(0, 5, "┃■          ■■■■■■■■■■                        ■┃");
//	ScreenPrint(0, 6, "┃■                                                      ■┃");
//	ScreenPrint(0, 7, "┃■                                                      ■┃");
//	ScreenPrint(0, 8, "┃■                  ┏━━━━━━━━┓                ■┃");
//	ScreenPrint(0, 9, "┃■                  ┃★   Sanke    ★┃                ■┃");
//	ScreenPrint(0, 10, "┃■                  ┗━━━━━┳━━┛                ■┃");
//	ScreenPrint(0, 11, "┃■                      /)/)    ┃ ☆                   ■┃");
//	ScreenPrint(0, 12, "┃■                   ★(*'')/                           ■┃");
//	ScreenPrint(0, 13, "┃■                                    총점 :            ■┃");
//	ScreenPrint(0, 14, "┃■                                                      ■┃");
//	ScreenPrint(0, 15, "┃■        ◈◈◈◈◈◈◈  Game Over  ◈◈◈◈◈◈◈     ■┃");
//	ScreenPrint(0, 16, "┃■                                                      ■┃");
//	ScreenPrint(0, 17, "┃■                          ■■■■■■■■            ■┃");
//	ScreenPrint(0, 18, "┃■                          ■                          ■┃");
//	ScreenPrint(0, 19, "┃■                          ■                          ■┃");
//	ScreenPrint(0, 20, "┃■                          ■                          ■┃");
//	ScreenPrint(0, 21, "┃■                          ■                          ■┃");
//	ScreenPrint(0, 22, "┃■■■■■■■■■■■■■■■■■■■■■■■■■■■■■┃");
//	ScreenPrint(0, 23, "┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛");
//}
//
//void Move()
//{
//	// Note: Step 1 . 모든 현재 좌표를 이전 좌표로 복사
//	g_sSnake.sHead.nOldX = g_sSnake.sHead.nX;
//	g_sSnake.sHead.nOldY = g_sSnake.sHead.nY;
//
//	for (int i = 0; i < g_sSnake.nLife - 1; i++)
//	{
//		g_sSnake.sTail[i].nOldX = g_sSnake.sTail[i].nX;
//		g_sSnake.sTail[i].nOldY = g_sSnake.sTail[i].nY;
//	}
//
//	// Note: Step 2. 이전 좌표를 현재 좌표로 복사
//	g_sSnake.sTail[0].nX = g_sSnake.sHead.nOldX;
//	g_sSnake.sTail[0].nY = g_sSnake.sHead.nOldY;
//
//	for (int i = 1; i < g_sSnake.nLife - 1; i++)
//	{
//		g_sSnake.sTail[i].nX = g_sSnake.sTail[i - 1].nOldX;
//		g_sSnake.sTail[i].nY = g_sSnake.sTail[i - 1].nOldY;
//	}
//}
//
//void Init()
//{
//	int nIndex;
//	FILE *fp;
//
//	if (g_nStage == -1) // 1번만 초기화가 되는 부분에 대한 처리 사항
//	{
//		g_nStage = 0;
//	}
//
//	fopen_s(&fp, g_strFileName[g_nStage], "r");
//	fscanf_s(fp, "%d %d %d\n", &g_StageInfo.LimitTime, &g_StageInfo.nEatCount, &g_StageInfo.nEnemyCount);
//	fread(g_StageInfo.nMap, sizeof(int), MAP_COL*MAP_ROW, fp);
//	fclose(fp);
//
//	// 적 캐릭터 설정
//	if (g_pEnemy != NULL)
//		free(g_pEnemy);
//
//	g_pEnemy = (ENEMY*)malloc(sizeof(ENEMY) * g_StageInfo.nEnemyCount);
//	srand((unsigned int)time(NULL)); // 난수 발생을 초기화	
//	nIndex = 0;
//
//	// Note: 적 캐릭터 추출 과정
//	for (int i = 0; i < MAP_ROW; i++)
//	{
//		for (int j = 0; j < MAP_COL; j++)
//		{
//			if (g_StageInfo.nMap[i][j] == 2)
//			{
//				g_pEnemy[nIndex].nLife = 1;
//				g_pEnemy[nIndex].nX = j;
//				g_pEnemy[nIndex].nY = i;
//				g_pEnemy[nIndex].nDirect = static_cast<DIRECT>(rand() % LAST);
//				g_pEnemy[nIndex].OldTime = clock();
//				g_pEnemy[nIndex].MoveTime = rand() % 100 + 100; // 최소 100에서 299까지
//
//				g_StageInfo.nMap[i][j] = -1; // 공백 상태로 전환
//				nIndex++;
//			}
//		}
//	}
//
//	// Note: 주인공 추출 과정
//	for (int i = 0; i < MAP_ROW; i++)
//	{
//		for (int j = 0; j < MAP_COL; j++)
//		{
//			if (g_StageInfo.nMap[i][j] == 3)
//			{
//				g_sSnake.sHead.nX = j;
//				g_sSnake.sHead.nY = i;
//				g_StageInfo.nMap[i][j] = -1; // 공백 상태로 전환
//
//											 // for문 2개 탈출 조건
//				i = MAP_ROW;
//				j = MAP_COL;
//			}
//		}
//	}
//
//	g_sSnake.sHead.nOldX = g_sSnake.sHead.nX;
//	g_sSnake.sHead.nOldY = g_sSnake.sHead.nY;
//	g_sSnake.MoveTime = 100;
//	g_sSnake.OldTime = clock();
//	g_sSnake.nDirect = LEFT;
//	g_sSnake.nLife = 4;
//
//	// Note: Snake 꼬리 초기화, 기본 3개
//	for (int i = 0; i < 3; i++)
//	{
//		g_sSnake.sTail[i].nX = g_sSnake.sHead.nX + i + 1;
//		g_sSnake.sTail[i].nY = g_sSnake.sHead.nY;
//	}
//
//	g_nEatCount = 0; // 먹이 먹은 개수
//	g_nGrade = 0;
//}
//
//// Note: 적 캐릭터와 충돌 체크 
//int IsCollision(int nX, int nY)
//{
//	for (int i = 0; i < g_StageInfo.nEnemyCount; i++)
//	{
//		if (g_pEnemy[i].nLife == 1)
//		{
//			if (g_pEnemy[i].nX == nX && g_pEnemy[i].nY == nY)
//			{
//				g_pEnemy[i].nLife = 0;
//				return 1; ///충돌
//			}
//		}
//	}
//
//	return 0;
//}
//
//void Update()
//{
//	int i, j;
//	clock_t CurTime = clock();
//	DIRECT nDirect;
//
//	switch (g_nGameState)
//	{
//	case READY:
//		if (CurTime - g_UpdateOldTime > 3000)  // 2초
//		{
//			g_nGameState = RUNNING;
//			g_GameStartTime = CurTime;
//		}
//		break;
//
//	case RUNNING:
//		g_RemainTime = (g_StageInfo.LimitTime - (CurTime - g_GameStartTime)) / 1000; // 게임 진행 남은 시간
//
//		if ((CurTime - g_GameStartTime) > g_StageInfo.LimitTime || g_nEatCount == g_StageInfo.nEatCount)
//		{
//			g_nGameState = STOP;
//			return;
//		}
//
//		// Note: 주인공 이동
//		if (CurTime - g_sSnake.OldTime > g_sSnake.MoveTime)
//		{
//			g_sSnake.OldTime = CurTime;
//			switch (g_sSnake.nDirect)
//			{
//			case LEFT:
//				if (g_sSnake.sHead.nX - 1 >= 0)
//				{
//					// 충돌 체크 
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX - 1] == 0) // 블럭과 충돌 
//						break;
//
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX - 1] == 1) // 먹이를 먹은 경우가 된다.
//					{
//						g_sSnake.nLife++;
//						g_StageInfo.nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX - 1] = -1; // 먹이는 공백으로 처리
//						g_nEatCount++;
//						g_nGrade += 10;
//					}
//
//					if (IsCollision(g_sSnake.sHead.nX - 1, g_sSnake.sHead.nY))// 적캐릭터와 충돌한 경우
//					{
//						g_sSnake.nLife--;
//						if (g_sSnake.nLife < 1)
//						{
//							g_nGameState = STOP;
//							return;
//						}
//					}
//
//					if (g_sSnake.nLife > 1) // 꼬리가 있는 것이다.
//						Move();
//
//					g_sSnake.sHead.nX--;
//				}
//				break;
//
//			case RIGHT:
//				if (g_sSnake.sHead.nX + 1 < MAP_COL)
//				{
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX + 1] == 0) // 블럭과 충돌 
//						break;
//
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX + 1] == 1) // 먹이를 먹은 경우가 된다.
//					{
//						g_sSnake.nLife++;
//						g_StageInfo.nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX + 1] = -1; // 공백으로 처리
//						g_nEatCount++;
//						g_nGrade += 10;
//					}
//
//					if (IsCollision(g_sSnake.sHead.nX + 1, g_sSnake.sHead.nY))// 적캐릭터와 충돌한 경우
//					{
//						g_sSnake.nLife--;
//						if (g_sSnake.nLife < 1)
//						{
//							g_nGameState = STOP;
//							return;
//						}
//					}
//
//					if (g_sSnake.nLife > 1) // 꼬리가 있는 것이다.
//						Move();
//
//					g_sSnake.sHead.nX++;
//				}
//				break;
//
//			case UP:
//				if (g_sSnake.sHead.nY - 1 >= 0)
//				{
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY - 1][g_sSnake.sHead.nX] == 0) // 블럭과 충돌 
//						break;
//
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY - 1][g_sSnake.sHead.nX] == 1) // 먹이를 먹은 경우가 된다.
//					{
//						g_sSnake.nLife++;
//						g_StageInfo.nMap[g_sSnake.sHead.nY - 1][g_sSnake.sHead.nX] = -1; // 공백으로 처리
//						g_nEatCount++;
//						g_nGrade += 10;
//					}
//
//					if (IsCollision(g_sSnake.sHead.nX, g_sSnake.sHead.nY - 1))// 적캐릭터와 충돌한 경우
//					{
//						g_sSnake.nLife--;
//						if (g_sSnake.nLife < 1)
//						{
//							g_nGameState = STOP;
//							return;
//						}
//					}
//
//					if (g_sSnake.nLife > 1) // 꼬리가 있는 것이다.
//						Move();
//					g_sSnake.sHead.nY--;
//				}
//				break;
//
//			case DOWN:
//				if (g_sSnake.sHead.nY + 1 < MAP_ROW)
//				{
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY + 1][g_sSnake.sHead.nX] == 0) // 블럭과 충돌 
//						break;
//
//					if (g_StageInfo.nMap[g_sSnake.sHead.nY + 1][g_sSnake.sHead.nX] == 1) // 먹이를 먹은 경우가 된다.
//					{
//						g_sSnake.nLife++;
//						g_StageInfo.nMap[g_sSnake.sHead.nY + 1][g_sSnake.sHead.nX] = -1; // 공백으로 처리
//						g_nEatCount++;
//						g_nGrade += 10;
//					}
//
//					if (IsCollision(g_sSnake.sHead.nX, g_sSnake.sHead.nY + 1))// 적캐릭터와 충돌한 경우
//					{
//						g_sSnake.nLife--;
//						if (g_sSnake.nLife < 1)
//						{
//							g_nGameState = STOP;
//							return;
//						}
//					}
//
//					if (g_sSnake.nLife > 1) // 꼬리가 있는 것이다.
//						Move();
//					g_sSnake.sHead.nY++;
//				}
//				break;
//			}
//		}
//
//		// 적 캐릭터 이동
//		for (i = 0; i < g_StageInfo.nEnemyCount; i++)
//		{
//			if (g_pEnemy[i].nLife == 1)
//			{
//				// 적 캐릭터의 방향 전환과 이동에 관한것
//				if (CurTime - g_pEnemy[i].OldTime > g_pEnemy[i].MoveTime)
//				{
//					g_pEnemy[i].OldTime = CurTime;
//
//					switch (g_pEnemy[i].nDirect)
//					{
//					case LEFT:
//						if (g_pEnemy[i].nX - 1 >= 0)
//						{
//							// 벽에 부딪힌 경우
//							if (g_StageInfo.nMap[g_pEnemy[i].nY][g_pEnemy[i].nX - 1] == 0)
//							{
//								// 방향 전환을 위한 랜덤 부분
//								srand((unsigned int)time(NULL));
//								while (1)
//								{
//									nDirect = static_cast<DIRECT>(rand() % LAST);
//									if (nDirect != LEFT)
//										break;
//								}
//								g_pEnemy[i].nDirect = nDirect; // 새로운 방향을 제시한다
//							}
//							else {
//								g_pEnemy[i].nX--;
//							}
//						}
//						break;
//					case RIGHT:
//						if (g_pEnemy[i].nX + 1 < MAP_COL)
//						{
//							// 벽에 부딪힌 경우
//							if (g_StageInfo.nMap[g_pEnemy[i].nY][g_pEnemy[i].nX + 1] == 0)
//							{
//								// 방향 전환을 위한 랜덤 부분
//								srand((unsigned int)time(NULL));
//								while (1)
//								{
//									nDirect = static_cast<DIRECT>(rand() % LAST);
//									if (nDirect != RIGHT)
//										break;
//								}
//								g_pEnemy[i].nDirect = nDirect; // 새로운 방향을 제시한다
//							}
//							else {
//								g_pEnemy[i].nX++;
//							}
//						}
//						break;
//					case UP:
//						if (g_pEnemy[i].nY - 1 >= 0)
//						{
//							// 벽에 부딪힌 경우
//							if (g_StageInfo.nMap[g_pEnemy[i].nY - 1][g_pEnemy[i].nX] == 0)
//							{
//								// 방향 전환을 위한 랜덤 부분
//								srand((unsigned int)time(NULL));
//								while (1)
//								{
//									nDirect = static_cast<DIRECT>(rand() % LAST);
//									if (nDirect != UP)
//										break;
//								}
//								g_pEnemy[i].nDirect = nDirect; // 새로운 방향을 제시한다
//							}
//							else {
//								g_pEnemy[i].nY--;
//							}
//						}
//						break;
//					case DOWN:
//						// 벽에 부딪힌 경우
//						if (g_pEnemy[i].nY + 1 < MAP_ROW)
//						{
//
//							if (g_StageInfo.nMap[g_pEnemy[i].nY + 1][g_pEnemy[i].nX] == 0)
//							{
//								// 방향 전환을 위한 랜덤 부분
//								srand((unsigned int)time(NULL));
//								while (1)
//								{
//									nDirect = static_cast<DIRECT>(rand() % LAST);
//									if (nDirect != DOWN)
//										break;
//								}
//								g_pEnemy[i].nDirect = nDirect; // 새로운 방향을 제시한다
//							}
//							else {
//								g_pEnemy[i].nY++;
//							}
//						}
//						break;
//					}
//				}
//
//				// 뱀 머리와 적 캐릭터의 충돌
//				if (g_sSnake.sHead.nX == g_pEnemy[i].nX && g_sSnake.sHead.nY == g_pEnemy[i].nY)
//				{
//					g_pEnemy[i].nLife = 0;
//					g_sSnake.nLife--;
//
//					if (g_sSnake.nLife < 1) // 머리가 죽으면 게임을 종료한다.
//					{
//						g_nGameState = STOP;
//						return;
//					}
//				}
//
//				// 뱀 꼬리와 적 캐릭터의 충돌
//				for (j = 0; j < g_sSnake.nLife - 1; j++)
//				{
//					if (g_pEnemy[i].nX == g_sSnake.sTail[j].nX && g_pEnemy[i].nY == g_sSnake.sTail[j].nY)
//					{
//						g_pEnemy[i].nLife = 0;
//						g_sSnake.nLife--;
//					}
//				}
//			}
//		}
//
//		break;
//	case STOP:
//		//// 성공이냐 실패를 판단해주어서 출력을 해주는 부분이 와야 한다.  
//		if (g_nEatCount >= g_StageInfo.nEatCount)
//		{
//			g_UpdateOldTime = CurTime;
//			g_nGameState = SUCCESS;
//			g_nTotalGrade += g_nGrade;
//		}
//		else {
//			g_nGameState = FAILED;
//		}
//		break;
//
//	case SUCCESS:
//		if (CurTime - g_UpdateOldTime > 3000)
//		{
//			g_UpdateOldTime = CurTime;
//			++g_nStage;
//			Init();
//			g_nGameState = READY;
//		}
//		break;
//	}
//}
//
//
//void Render()
//{
//	int i, j;
//	char string[100];
//	static int nMap[MAP_ROW][MAP_COL]; // 출력용
//
//	ScreenClear();
//
//	switch (g_nGameState)
//	{
//	case INIT:
//		if (g_nStage == 0)
//			InitScreen();
//		break;
//
//	case READY:
//		ReadyScreen();
//		sprintf(string, "%d Stage", g_nStage + 1);
//		ScreenPrint(23, 9, string);
//		break;
//
//	case RUNNING:
//		//출력용 맵에 복사 
//		memcpy(nMap, g_StageInfo.nMap, sizeof(int)*MAP_ROW*MAP_COL);
//
//		//// 적 캐릭터 그리기
//		for (i = 0; i < g_StageInfo.nEnemyCount; i++)
//		{
//			if (g_pEnemy[i].nLife == 1)
//			{
//				nMap[g_pEnemy[i].nY][g_pEnemy[i].nX] = 2;
//			}
//		}
//
//		// 주인공 머리
//		nMap[g_sSnake.sHead.nY][g_sSnake.sHead.nX] = 3;
//
//		// 꼬리
//		for (i = 0; i < g_sSnake.nLife - 1; i++)
//			nMap[g_sSnake.sTail[i].nY][g_sSnake.sTail[i].nX] = 4;
//
//		for (i = 0; i < MAP_ROW; i++)
//		{
//			for (j = 0; j < MAP_COL; j++)
//			{
//				if (nMap[i][j] == -1)
//					ScreenPrint((j * 2) + 2, i + 1, "  ");
//				else
//					ScreenPrint((j * 2) + 2, i + 1, g_StateShape[nMap[i][j]]);
//			}
//		}
//
//		// Note: 스테이지 정보 출력
//		sprintf(string, "%d Stage", g_nStage + 1);
//		ScreenPrint(61, 5, string);
//		sprintf(string, "남은시간: %d분 %d초", g_RemainTime / 60, g_RemainTime % 60);
//		ScreenPrint(61, 7, string);
//		sprintf(string, "먹이수: %d", g_nEatCount);
//		ScreenPrint(61, 9, string);
//		sprintf(string, "득점: %d", g_nGrade);
//		ScreenPrint(61, 11, string);
//		break;
//	case SUCCESS:
//		SuccessScreen();
//		sprintf(string, "%d", g_nStage + 1);
//		ScreenPrint(19, 7, string);
//		sprintf(string, "총점: %d", g_nTotalGrade);
//		ScreenPrint(18, 17, string);
//		break;
//	case FAILED:
//		FailureScreen();
//		break;
//
//	case RESULT:
//		ResultScreen();
//		sprintf(string, "%d", g_nTotalGrade);
//		ScreenPrint(48, 13, string);
//		break;
//	}
//
//	ScreenFlipping();
//}
//
//void Release()
//{
//	if (g_pEnemy != NULL)
//		free(g_pEnemy);
//}
//
//
//int main(void)
//{
//	int nKey;
//	clock_t CurTime;
//
//	ScreenInit();
//	Init();
//
//	while (1)
//	{
//		CurTime = clock();
//		if (_kbhit())
//		{
//			if (g_nGameState == RESULT)
//				break;
//
//			nKey = _getch();
//
//			switch (nKey)
//			{
//			case ' ':
//				if (g_nGameState == INIT && g_nStage == 0)
//				{
//					g_nGameState = READY;
//					g_UpdateOldTime = clock();  // ready를 일정시간 지속해 주기 위해 							
//				}
//				break;
//			case 75:
//				g_sSnake.nDirect = LEFT;
//				break;
//
//			case 77:
//				g_sSnake.nDirect = RIGHT;
//				break;
//
//			case 72:
//				g_sSnake.nDirect = UP;
//				break;
//
//			case 80:
//				g_sSnake.nDirect = DOWN;
//				break;
//
//			case 'y':
//			case 'Y':
//				if (g_nGameState == FAILED)
//				{
//					Init();
//					g_nGameState = READY;
//					g_UpdateOldTime = clock();
//				}
//				break;
//			case 'n':
//			case 'N':
//				if (g_nGameState == FAILED)
//				{
//					g_nGameState = RESULT;
//				}
//				break;
//			}
//		}
//
//		Update();
//		Render();
//	}
//
//	Release();
//	ScreenRelease();
//
//	return 0;
//}